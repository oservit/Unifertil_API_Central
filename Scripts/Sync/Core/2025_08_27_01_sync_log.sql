
/*
DROP TABLE sync_hashes CASCADE CONSTRAINTS;
DROP TABLE sync_logs CASCADE CONSTRAINTS;
DROP TABLE sync_scheduled_events CASCADE CONSTRAINTS;
DROP TABLE sync_batches CASCADE CONSTRAINTS;
DROP TABLE sync_entities CASCADE CONSTRAINTS;
DROP TABLE sync_operations CASCADE CONSTRAINTS;
DROP TABLE sync_status CASCADE CONSTRAINTS;
*/


-- ========================================
-- Tabela de status
-- ========================================
CREATE TABLE sync_status (
    id     NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name   VARCHAR2(50) NOT NULL UNIQUE
);

INSERT INTO sync_status (name) VALUES ('SUCCESS'); -- 1
INSERT INTO sync_status (name) VALUES ('ERROR');   -- 2
INSERT INTO sync_status (name) VALUES ('PENDING'); -- 3;
COMMIT;

-- ========================================
-- Tabela de operações
-- ========================================
CREATE TABLE sync_operations (
    id   NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(50) NOT NULL UNIQUE
);

INSERT INTO sync_operations (name) VALUES ('INSERT'); -- 1
INSERT INTO sync_operations (name) VALUES ('UPDATE'); -- 2
INSERT INTO sync_operations (name) VALUES ('DELETE'); -- 3
COMMIT;

-- ========================================
-- Tabela de entidades
-- ========================================
CREATE TABLE sync_entities (
    id   NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL UNIQUE
);

INSERT INTO sync_entities (name) VALUES ('Product');
COMMIT;

-- ========================================
-- Batches de execução
-- ========================================
CREATE TABLE sync_batches (
    id          NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    start_time  TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    end_time    TIMESTAMP,
    status_id   NUMBER,
    CONSTRAINT fk_batch_status FOREIGN KEY (status_id) REFERENCES sync_status(id)
);

-- ========================================
-- Tabela de agendamento
-- ========================================
CREATE TABLE sync_scheduled_events (
    id                NUMBER(19,0) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    entity_id         NUMBER(10,0) NOT NULL,
    record_id         NUMBER(19,0) NOT NULL,
    operation_id      NUMBER(10,0) NOT NULL,
    status_id         NUMBER(10,0) DEFAULT 3 NOT NULL,
    payload           CLOB NOT NULL,
    hash_value        VARCHAR2(256 CHAR) NOT NULL,
    attempts_count    NUMBER(10,0) DEFAULT 0 NOT NULL,
    created_at        TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,

    service_url  VARCHAR2(1000 CHAR) NOT NULL,
    auth_url     VARCHAR2(1000 CHAR),
    auth_username   VARCHAR2(200 CHAR) NOT NULL,
    auth_password   VARCHAR2(200 CHAR) NOT NULL,
    log_id            NUMBER(19,0) NULL,
    last_attempt_at TIMESTAMP,
    CONSTRAINT fk_sync_sched_status FOREIGN KEY (status_id) REFERENCES sync_status(id),
    CONSTRAINT fk_sync_sched_log    FOREIGN KEY (log_id)    REFERENCES sync_logs(id)
);

-- Índice para consultas por status (ex.: pendentes)
CREATE INDEX idx_sync_sched_status
ON sync_scheduled_events (status_id);

-- Índice composto para localizar rapidamente agendamento de um registro específico
CREATE INDEX idx_sync_sched_entity_record_operation
ON sync_scheduled_events (entity_id, record_id, operation_id);

-- ========================================
-- Tabela de agendamento
-- ========================================
CREATE TABLE sync_scheduled_events (
    id                NUMBER(19,0) GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    entity_id         NUMBER(10,0) NOT NULL,
    record_id         NUMBER(19,0) NOT NULL,
    operation_id      NUMBER(10,0) NOT NULL,
    status_id         NUMBER(10,0) DEFAULT 3 NOT NULL,
    payload           CLOB NOT NULL,
    hash_value        VARCHAR2(256 CHAR) NOT NULL,
    attempts_count    NUMBER(10,0) DEFAULT 0 NOT NULL,
    created_at        TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    service_url  VARCHAR2(1000 CHAR) NOT NULL,
    auth_url     VARCHAR2(1000 CHAR),
    auth_username   VARCHAR2(200 CHAR) NOT NULL,
    auth_password   VARCHAR2(200 CHAR) NOT NULL,
    log_id            NUMBER(19,0) NULL,
    created_at        TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
last_attempt_at TIMESTAMP DEFAULT SYSTIMESTAMP,
    CONSTRAINT fk_sync_sched_status FOREIGN KEY (status_id) REFERENCES sync_status(id),
    CONSTRAINT fk_sync_sched_log    FOREIGN KEY (log_id)    REFERENCES sync_logs(id)
);

-- Índice para consultas por status (ex.: pendentes)
CREATE INDEX idx_sync_sched_status
ON sync_scheduled_events (status_id);

-- Índice composto para localizar rapidamente agendamento de um registro específico
CREATE INDEX idx_sync_sched_entity_record_operation
ON sync_scheduled_events (entity_id, record_id, operation_id);

-- ========================================
-- Tabela de hashes
-- ========================================
CREATE TABLE sync_hashes (
    id             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    entity_id      NUMBER NOT NULL,
    record_id      NUMBER NOT NULL,
    operation_id   NUMBER NOT NULL,
    hash_value     VARCHAR2(256) NOT NULL,
    operation_date TIMESTAMP DEFAULT SYSTIMESTAMP,

    -- Unique constraint
    CONSTRAINT uq_sync_hashes_entity_record UNIQUE (entity_id, record_id),

    -- Foreign keys
    CONSTRAINT fk_hash_entity    FOREIGN KEY (entity_id)    REFERENCES sync_entities(id),
    CONSTRAINT fk_hash_operation FOREIGN KEY (operation_id) REFERENCES sync_operations(id)
);

-- Índices para otimizar buscas
CREATE INDEX idx_sync_hashes_operation  ON sync_hashes(operation_id);
CREATE INDEX idx_sync_hashes_entity     ON sync_hashes(entity_id);
CREATE INDEX idx_sync_hashes_hash       ON sync_hashes(hash_value);
CREATE INDEX idx_sync_hashes_record_id  ON sync_hashes(record_id);

COMMIT;
